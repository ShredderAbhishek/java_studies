Garbage collection:- 
https://www.journaldev.com/16659/garbage-collection-in-java
https://docs.oracle.com/javase/9/gctuning/introduction-garbage-collection-tuning.htm#JSGCT-GUID-326EB4CF-8C8C-4267-8355-21AB04F0D304

NOTES on Java SE 9 Hotspot Garbage Collector:-
Garbage collector reponsible for dynamic memory management to or from operating system,Hands out that memory to the application as it 
requests it,Determines which parts of that memory is still in use by the application, reclaming unused memory for reuse by the application

A server class machine has >=2 physical processors, >=2 GB physical memory; so the default cong on such machines: , garbage first(G1) 
collector, initial heap size 1/64th of physical memory, max upto 1/4th size of physical memory, tiered compiler, using both C1 and C2.

GC can be configured to meet either maximum pasuse-time goal OR throughput goal:-
1. maximum pause-time goal: pasue time is the duration when application stops and gc is performed to recover the space no longer in use.
the intent is only to limit the longest of these pasue times.  maximum pause-time goal is specified with the command-line 
option -XX:MaxGCPauseMillis=<nnn> , meaning pause time of nnn milliseconds or lesser is required. GC adjusts the java heap size and 
other param to meet <=nnn pasue time. this might result in more frequent GC though.
2. throughput goal: this is the time spent collecting garbages and the time spent outside is the application time.The goal is specified 
by the command-line option -XX:GCTimeRatio=nnn. The ratio of garbage collection time to application time is 1/ (1+nnn). 
For example, -XX:GCTimeRatio=19 sets a goal of 1/20th or 5% of the total time for garbage collection.
Footprint
If the throughput and maximum pause-time goals have been met, then the garbage collector reduces the size of the heap until one of the 
goals (invariably the throughput goal) can't be met. The minimum and maximum heap sizes that the garbage collector can use can be set 
using -Xms=<nnn> and -Xmx=<mmm> for minimum and maximum heap size respectively.



Eden  survivor survivor virtual                         virtual
-----|--------|--------|-------|---------------------|-----------|
<--------Young---------------->|<--------------Old--------------->

The vast majority of objects are allocated in a pool dedicated to young objects (the young generation), and most objects die there. When 
the young generation fills up, it causes a minor collection in which only the young generation is collected; garbage in other generations
isn't reclaimed. The costs of such collections are, to the first order, proportional to the number of live objects being collected; a 
young generation full of dead objects is collected very quickly. Typically, some fraction of the surviving objects from the young
generation are moved to the old generation during each minor collection. Eventually, the old generation fills up and must be collected, 
resulting in a major collection, in which the entire heap is collected. Major collections usually last much longer than minor collections 
because a significantly larger number of objects are involved. Figure 3-2 shows the default arrangement of generations in the serial 
garbage collector:
The young generation consists of eden and two survivor spaces. Most objects are initially allocated in eden. One survivor space is 
empty at any time, and serves as the destination of live objects in eden and the other survivor space during garbage collection; after
garbage collection, eden and the source survivor space are empty. In the next garbage collection, the purpose of the two survivor spaces
are exchanged. The one space recently filled is a source of live objects that are copied into the other survivor space. Objects are 
copied between survivor spaces in this way until they've been copied a certain number of times or there isn't enough space left there. 
These objects are copied into the old region. This process is also called aging.



